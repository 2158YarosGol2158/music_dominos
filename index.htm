<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ú—É–∑–∏—á–Ω–µ –î–æ–º—ñ–Ω–æ</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
            color: white;
        }

        .game-container {
            max-width: 1200px;
            margin: 0 auto;
        }

        h1 {
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .game-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            background: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 10px;
            backdrop-filter: blur(10px);
        }

        .score, .turn {
            font-size: 1.2em;
        }

        .game-board {
            background: rgba(255,255,255,0.15);
            min-height: 400px;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            border: 2px solid rgba(255,255,255,0.2);
            position: relative;
            overflow: auto;
        }

        .domino-chain {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            justify-content: center;
            gap: 3px;
            max-width: calc(100% - 40px);
        }

        .domino {
            width: 80px;
            height: 40px;
            background: white;
            border-radius: 8px;
            display: flex;
            cursor: grab;
            transition: all 0.3s ease;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            border: 2px solid #333;
            position: relative;
            user-select: none;
        }

        .domino:active {
            cursor: grabbing;
        }

        .domino.dragging {
            opacity: 0.7;
            z-index: 1000;
            transform: rotate(5deg);
        }

        .domino.vertical {
            width: 40px;
            height: 80px;
            flex-direction: column;
        }

        .domino-half {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            color: #333;
            border-right: 1px solid #333;
            padding: 2px;
        }

        .domino.vertical .domino-half {
            border-right: none;
            border-bottom: 1px solid #333;
        }

        .domino.vertical .domino-half:last-child {
            border-bottom: none;
        }

        .domino-half:last-child {
            border-right: none;
        }

        .player-hand {
            background: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 10px;
            min-height: 80px;
        }

        .hand-title {
            margin-bottom: 10px;
        }

        .hand-dominoes {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            min-height: 50px;
        }

        .controls {
            text-align: center;
            margin-top: 20px;
        }

        .stock-pile {
            background: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 10px;
            text-align: center;
        }

        .stock-domino {
            width: 60px;
            height: 30px;
            background: rgba(255,255,255,0.3);
            border-radius: 5px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            margin: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 1px solid rgba(255,255,255,0.5);
        }

        .draw-button-container {
            background: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 10px;
            text-align: center;
        }

        button {
            background: linear-gradient(45deg, #ff6b6b, #ff8e53);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            font-size: 1em;
            cursor: pointer;
            margin: 0 10px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.3);
        }

        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .message {
            text-align: center;
            font-size: 1.2em;
            margin: 15px 0;
            padding: 10px;
            background: rgba(255,255,255,0.1);
            border-radius: 8px;
            min-height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .drop-zone {
            min-width: 50px;
            min-height: 50px;
            border: 2px dashed rgba(255,255,255,0.5);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: rgba(255,255,255,0.7);
            font-size: 12px;
            margin: 5px;
            transition: all 0.3s ease;
        }

        .drop-zone.drag-over {
            border-color: #ffeb3b;
            background: rgba(255,235,59,0.2);
        }

        .rotate-btn {
            position: absolute;
            top: -5px;
            right: -5px;
            width: 20px;
            height: 20px;
            background: #ff6b6b;
            border: none;
            border-radius: 50%;
            color: white;
            font-size: 10px;
            cursor: pointer;
            display: none;
            align-items: center;
            justify-content: center;
        }

        .domino:hover .rotate-btn {
            display: flex;
        }

        @media (max-width: 768px) {
            .domino {
                width: 60px;
                height: 30px;
                font-size: 12px;
            }

            .domino.vertical {
                width: 30px;
                height: 60px;
            }

            h1 {
                font-size: 2em;
            }

            .game-info {
                flex-direction: column;
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1>–ú—É–∑–∏—á–Ω–µ –î–æ–º—ñ–Ω–æ</h1>
        
        <div class="game-info">
            <div class="score">–†–∞—Ö—É–Ω–æ–∫ - –ì—Ä–∞–≤–µ—Ü—å: <span id="playerScore">0</span> | –ö–æ–º–ø'—é—Ç–µ—Ä: <span id="computerScore">0</span></div>
            <div class="turn">–•—ñ–¥: <span id="currentPlayer">–ì—Ä–∞–≤–µ—Ü—å</span></div>
        </div>

        <div class="message" id="gameMessage">–ü–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å –¥–æ–º—ñ–Ω–æ –∑ –≤–∞—à–æ—ó —Ä—É–∫–∏ –Ω–∞ —ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ</div>

        <div class="game-board" id="gameBoard">
            <div class="drop-zone" data-position="start">–ü–æ—á–∞—Ç–æ–∫</div>
            <div class="domino-chain" id="dominoChain"></div>
            <div class="drop-zone" data-position="end">–ö—ñ–Ω–µ—Ü—å</div>
        </div>

        <div class="stock-pile">
            <div>–ó–∞–ø–∞—Å –¥–æ–º—ñ–Ω–æ: <span id="stockCount">14</span></div>
            <div id="stockDominoes"></div>
        </div>

        <div class="draw-button-container">
            <button onclick="drawFromStock()" id="drawButton" disabled>–í–∑—è—Ç–∏ –¥–æ–º—ñ–Ω–æ</button>
        </div>

        <div class="player-hand">
            <div class="hand-title">–í–∞—à—ñ –¥–æ–º—ñ–Ω–æ:</div>
            <div class="hand-dominoes" id="playerHand"></div>
        </div>

        <div class="player-hand">
            <div class="hand-title">–î–æ–º—ñ–Ω–æ –∫–æ–º–ø'—é—Ç–µ—Ä–∞: <span id="computerHandCount">7</span></div>
            <div class="hand-dominoes" id="computerHand"></div>
        </div>

        <div class="controls">
            <button onclick="newGame()">–ù–æ–≤–∞ –≥—Ä–∞</button>
            <button onclick="skipTurn()" id="skipButton" disabled>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ö—ñ–¥</button>
            <button onclick="showRules()">–ü—Ä–∞–≤–∏–ª–∞</button>
        </div>
    </div>

    <script>
        const instruments = ['üé∏', 'üéπ', 'ü•Å', 'üé∫', 'üéª', 'üé∑', 'ü™ï'];
        
        let gameState = {
            playerHand: [],
            computerHand: [],
            board: [],
            stock: [],
            currentPlayer: 'player',
            gameEnded: false,
            playerScore: 0,
            computerScore: 0,
            draggedDomino: null,
            canDraw: false
        };

        function createDomino(left, right) {
            return { left, right, id: Math.random().toString(36).substr(2, 9), isVertical: false };
        }

        function createDominoSet() {
            const dominoes = [];
            for (let i = 0; i < instruments.length; i++) {
                for (let j = i; j < instruments.length; j++) {
                    dominoes.push(createDomino(i, j));
                }
            }
            return dominoes;
        }

        function shuffle(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }

        function initGame() {
            const allDominoes = shuffle(createDominoSet());
            gameState.playerHand = allDominoes.slice(0, 7);
            gameState.computerHand = allDominoes.slice(7, 14);
            gameState.stock = allDominoes.slice(14);
            gameState.board = [];
            gameState.currentPlayer = 'player';
            gameState.gameEnded = false;
            gameState.canDraw = false;
            
            updateDisplay();
            updateMessage('–ü–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å –¥–æ–º—ñ–Ω–æ –∑ –≤–∞—à–æ—ó —Ä—É–∫–∏ –Ω–∞ —ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ');
        }

        function renderDomino(domino, isPlayerDomino = false) {
            const div = document.createElement('div');
            div.className = `domino ${domino.isVertical ? 'vertical' : ''}`;
            div.draggable = isPlayerDomino && gameState.currentPlayer === 'player' && !gameState.gameEnded;
            div.dataset.dominoId = domino.id;
            
            div.innerHTML = `
                <div class="domino-half">${instruments[domino.left]}</div>
                <div class="domino-half">${instruments[domino.right]}</div>
                ${isPlayerDomino ? '<button class="rotate-btn" onclick="rotateDomino(\'' + domino.id + '\')">‚ü≤</button>' : ''}
            `;
            
            if (isPlayerDomino) {
                div.addEventListener('dragstart', handleDragStart);
                div.addEventListener('dragend', handleDragEnd);
            }
            
            return div;
        }

        function rotateDomino(dominoId) {
            const domino = gameState.playerHand.find(d => d.id === dominoId);
            if (domino) {
                domino.isVertical = !domino.isVertical;
                updateDisplay();
            }
        }

        function handleDragStart(e) {
            if (gameState.currentPlayer !== 'player' || gameState.gameEnded) {
                e.preventDefault();
                return;
            }
            
            const dominoId = e.target.dataset.dominoId;
            gameState.draggedDomino = gameState.playerHand.find(d => d.id === dominoId);
            e.target.classList.add('dragging');
            e.dataTransfer.effectAllowed = 'move';
        }

        function handleDragEnd(e) {
            e.target.classList.remove('dragging');
            gameState.draggedDomino = null;
        }

        function updateDisplay() {
            const playerHandEl = document.getElementById('playerHand');
            playerHandEl.innerHTML = '';
            gameState.playerHand.forEach(domino => {
                playerHandEl.appendChild(renderDomino(domino, true));
            });

            document.getElementById('computerHandCount').textContent = gameState.computerHand.length;
            document.getElementById('stockCount').textContent = gameState.stock.length;

            const chainEl = document.getElementById('dominoChain');
            chainEl.innerHTML = '';
            
            if (gameState.board.length === 0) {
                document.querySelector('[data-position="start"]').textContent = '–ü–µ—Ä—à–µ –¥–æ–º—ñ–Ω–æ';
                document.querySelector('[data-position="end"]').style.display = 'none';
            } else {
                document.querySelector('[data-position="start"]').textContent = '‚Üê';
                document.querySelector('[data-position="end"]').style.display = 'flex';
                document.querySelector('[data-position="end"]').textContent = '‚Üí';
                
                // –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–ø—Ä—è–º–æ–∫ –ª–∞–Ω—Ü—é–∂–∫–∞
                let direction = 'horizontal'; // –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –Ω–∞–ø—Ä—è–º–æ–∫
                let x = 0, y = 0;
                const dominoWidth = 80;
                const dominoHeight = 40;
                const spacing = 10;
                
                // –†–æ–∑–º—ñ—â—É—î–º–æ –ø–µ—Ä—à–µ –¥–æ–º—ñ–Ω–æ
                if (gameState.board.length > 0) {
                    const firstDomino = gameState.board[0];
                    const firstDominoEl = renderDomino(firstDomino);
                    firstDominoEl.style.position = 'absolute';
                    firstDominoEl.style.left = `${x}px`;
                    firstDominoEl.style.top = `${y}px`;
                    chainEl.appendChild(firstDominoEl);
                    
                    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –¥–æ–º—ñ–Ω–æ
                    x += dominoWidth + spacing;
                }
                
                // –†–æ–∑–º—ñ—â—É—î–º–æ —Ä–µ—à—Ç—É –¥–æ–º—ñ–Ω–æ
                for (let i = 1; i < gameState.board.length; i++) {
                    const domino = gameState.board[i];
                    const dominoEl = renderDomino(domino);
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î–º–æ –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—é –¥–æ–º—ñ–Ω–æ
                    const shouldBeVertical = (i % 4 === 1 || i % 4 === 3); // –ö–æ–∂–Ω–µ –¥—Ä—É–≥–µ —ñ —á–µ—Ç–≤–µ—Ä—Ç–µ –¥–æ–º—ñ–Ω–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–µ
                    
                    if (shouldBeVertical) {
                        domino.isVertical = true;
                        dominoEl.className = 'domino vertical';
                    } else {
                        domino.isVertical = false;
                        dominoEl.className = 'domino';
                    }
                    
                    dominoEl.style.position = 'absolute';
                    
                    if (shouldBeVertical) {
                        dominoEl.style.left = `${x}px`;
                        dominoEl.style.top = `${y}px`;
                        y += dominoHeight + spacing;
                    } else {
                        dominoEl.style.left = `${x}px`;
                        dominoEl.style.top = `${y}px`;
                        x += dominoWidth + spacing;
                    }
                    
                    // –ó–º—ñ–Ω—é—î–º–æ –Ω–∞–ø—Ä—è–º–æ–∫ –ø—ñ—Å–ª—è –∫–æ–∂–Ω–∏—Ö 4 –¥–æ–º—ñ–Ω–æ
                    if (i % 4 === 0) {
                        const temp = x;
                        x = y;
                        y = temp;
                    }
                    
                    chainEl.appendChild(dominoEl);
                }
            }

            setupDropZones();
            updateStockDisplay();
            checkCanDraw();

            document.getElementById('playerScore').textContent = gameState.playerScore;
            document.getElementById('computerScore').textContent = gameState.computerScore;
            document.getElementById('currentPlayer').textContent = 
                gameState.currentPlayer === 'player' ? '–ì—Ä–∞–≤–µ—Ü—å' : '–ö–æ–º–ø\'—é—Ç–µ—Ä';

            const skipButton = document.getElementById('skipButton');
            skipButton.disabled = gameState.currentPlayer !== 'player' || gameState.gameEnded;
            
            const drawButton = document.getElementById('drawButton');
            drawButton.disabled = !gameState.canDraw || gameState.currentPlayer !== 'player' || gameState.gameEnded || gameState.stock.length === 0;
        }

        function setupDropZones() {
            const dropZones = document.querySelectorAll('.drop-zone');
            dropZones.forEach(zone => {
                zone.addEventListener('dragover', handleDragOver);
                zone.addEventListener('drop', handleDrop);
                zone.addEventListener('dragenter', handleDragEnter);
                zone.addEventListener('dragleave', handleDragLeave);
            });
        }

        function handleDragOver(e) {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
        }

        function handleDragEnter(e) {
            e.preventDefault();
            e.target.classList.add('drag-over');
        }

        function handleDragLeave(e) {
            e.target.classList.remove('drag-over');
        }

        function handleDrop(e) {
            e.preventDefault();
            e.target.classList.remove('drag-over');
            
            if (!gameState.draggedDomino) return;
            
            const position = e.target.dataset.position;
            const canPlace = canPlaceDomino(gameState.draggedDomino, position);
            
            if (!canPlace) {
                updateMessage('–¶–µ –¥–æ–º—ñ–Ω–æ –Ω–µ –º–æ–∂–Ω–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ —Å—é–¥–∏! –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –ø–æ–≤–∏–Ω–Ω—ñ –∑–±—ñ–≥–∞—Ç–∏—Å—è.');
                return;
            }

            const adjustedDomino = adjustDominoForPlacement(gameState.draggedDomino, position);
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î–º–æ –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–æ–º—ñ–Ω–æ
            if (gameState.board.length > 0) {
                if (position === 'start') {
                    adjustedDomino.isVertical = gameState.board[0].isVertical;
                } else {
                    adjustedDomino.isVertical = gameState.board[gameState.board.length - 1].isVertical;
                }
            }
            
            if (position === 'start') {
                gameState.board.unshift(adjustedDomino);
            } else {
                gameState.board.push(adjustedDomino);
            }
            
            gameState.playerHand = gameState.playerHand.filter(d => d.id !== gameState.draggedDomino.id);
            
            if (gameState.playerHand.length === 0) {
                endGame('player');
                return;
            }
            
            gameState.currentPlayer = 'computer';
            updateDisplay();
            updateMessage('–•—ñ–¥ –∫–æ–º–ø\'—é—Ç–µ—Ä–∞...');
            
            setTimeout(computerMove, 1000);
        }

        function updateStockDisplay() {
            const stockEl = document.getElementById('stockDominoes');
            stockEl.innerHTML = '';
            
            // –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –≤–µ—Ä—Ö–Ω—î –¥–æ–º—ñ–Ω–æ —è–∫ —Å—Ç–µ–∫
            if (gameState.stock.length > 0) {
                for (let i = 0; i < Math.min(3, gameState.stock.length); i++) {
                    const stockDiv = document.createElement('div');
                    stockDiv.className = 'stock-domino';
                    stockDiv.textContent = 'üéº';
                    stockDiv.style.marginLeft = (i * 5) + 'px';
                    stockDiv.style.marginTop = (-i * 2) + 'px';
                    stockEl.appendChild(stockDiv);
                }
            }
        }

        function checkCanDraw() {
            if (gameState.currentPlayer !== 'player') {
                gameState.canDraw = false;
                return;
            }
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –º–æ–∂–ª–∏–≤—ñ —Ö–æ–¥–∏
            const possibleMoves = [];
            for (const domino of gameState.playerHand) {
                if (gameState.board.length === 0 || canPlaceDomino(domino, 'start') || canPlaceDomino(domino, 'end')) {
                    possibleMoves.push(domino);
                }
            }
            
            gameState.canDraw = possibleMoves.length === 0 && gameState.stock.length > 0;
        }

        function drawFromStock() {
            if (!gameState.canDraw || gameState.stock.length === 0 || gameState.currentPlayer !== 'player') return;
            
            const drawnDomino = gameState.stock.pop();
            gameState.playerHand.push(drawnDomino);
            
            updateDisplay();
            checkCanDraw();
            
            if (!gameState.canDraw) {
                updateMessage('–î–æ–º—ñ–Ω–æ –≤–∑—è—Ç–æ! –¢–µ–ø–µ—Ä –∑—Ä–æ–±—ñ—Ç—å —Ö—ñ–¥.');
            } else {
                updateMessage('–î–æ–º—ñ–Ω–æ –≤–∑—è—Ç–æ, –∞–ª–µ —Ö–æ–¥—ñ–≤ –≤—Å–µ —â–µ –Ω–µ–º–∞—î. –ú–æ–∂–µ—Ç–µ –≤–∑—è—Ç–∏ —â–µ –æ–¥–Ω–µ.');
            }
        }

        function canPlaceDomino(domino, position) {
            if (gameState.board.length === 0) return true;
            
            let target;
            if (position === 'start') {
                target = gameState.board[0].left;
            } else {
                target = gameState.board[gameState.board.length - 1].right;
            }
            
            return domino.left === target || domino.right === target;
        }

        function adjustDominoForPlacement(domino, position) {
            const newDomino = { ...domino };
            
            if (gameState.board.length === 0) return newDomino;
            
            let target;
            if (position === 'start') {
                target = gameState.board[0].left;
                if (domino.left === target) {
                    newDomino.left = domino.right;
                    newDomino.right = domino.left;
                }
            } else {
                target = gameState.board[gameState.board.length - 1].right;
                if (domino.right === target) {
                    newDomino.left = domino.right;
                    newDomino.right = domino.left;
                }
            }
            
            return newDomino;
        }

        function computerMove() {
            if (gameState.gameEnded) return;
            
            let possibleMoves = [];
            
            for (const domino of gameState.computerHand) {
                if (gameState.board.length === 0 || canPlaceDomino(domino, 'start')) {
                    possibleMoves.push({ domino, position: 'start' });
                }
                if (gameState.board.length === 0 || canPlaceDomino(domino, 'end')) {
                    possibleMoves.push({ domino, position: 'end' });
                }
            }
            
            // –Ø–∫—â–æ –Ω–µ–º–∞—î —Ö–æ–¥—ñ–≤, –∫–æ–º–ø'—é—Ç–µ—Ä –±–µ—Ä–µ –∑ –∑–∞–ø–∞—Å—É
            if (possibleMoves.length === 0 && gameState.stock.length > 0) {
                const drawnDomino = gameState.stock.pop();
                gameState.computerHand.push(drawnDomino);
                updateMessage('–ö–æ–º–ø\'—é—Ç–µ—Ä –≤–∑—è–≤ –¥–æ–º—ñ–Ω–æ –∑ –∑–∞–ø–∞—Å—É');
                updateDisplay();
                setTimeout(computerMove, 1000);
                return;
            }
            
            if (possibleMoves.length === 0) {
                updateMessage('–ö–æ–º–ø\'—é—Ç–µ—Ä –ø—Ä–æ–ø—É—Å–∫–∞—î —Ö—ñ–¥');
                gameState.currentPlayer = 'player';
                updateDisplay();
                setTimeout(() => updateMessage('–í–∞—à —Ö—ñ–¥!'), 1000);
                return;
            }
            
            const move = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];
            const adjustedDomino = adjustDominoForPlacement(move.domino, move.position);
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î–º–æ –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—é –¥–ª—è –¥–æ–º—ñ–Ω–æ –∫–æ–º–ø'—é—Ç–µ—Ä–∞
            if (gameState.board.length > 0) {
                if (move.position === 'start') {
                    adjustedDomino.isVertical = gameState.board[0].isVertical;
                } else {
                    adjustedDomino.isVertical = gameState.board[gameState.board.length - 1].isVertical;
                }
            }
            
            if (move.position === 'start') {
                gameState.board.unshift(adjustedDomino);
            } else {
                gameState.board.push(adjustedDomino);
            }
            
            gameState.computerHand = gameState.computerHand.filter(d => d.id !== move.domino.id);
            
            if (gameState.computerHand.length === 0) {
                endGame('computer');
                return;
            }
            
            gameState.currentPlayer = 'player';
            updateDisplay();
            updateMessage('–í–∞—à —Ö—ñ–¥!');
        }

        function skipTurn() {
            if (gameState.currentPlayer !== 'player' || gameState.gameEnded) return;
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥—ñ–π—Å–Ω–æ –Ω–µ–º–∞—î —Ö–æ–¥—ñ–≤
            checkCanDraw();
            if (gameState.canDraw && gameState.stock.length > 0) {
                updateMessage('–°–ø–æ—á–∞—Ç–∫—É –≤—ñ–∑—å–º—ñ—Ç—å –¥–æ–º—ñ–Ω–æ –∑ –∑–∞–ø–∞—Å—É!');
                return;
            }
            
            updateMessage('–í–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ö—ñ–¥');
            gameState.currentPlayer = 'computer';
            updateDisplay();
            setTimeout(computerMove, 1000);
        }

        function endGame(winner) {
            gameState.gameEnded = true;
            
            if (winner === 'player') {
                gameState.playerScore++;
                updateMessage('–í—ñ—Ç–∞—î–º–æ! –í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏!');
            } else {
                gameState.computerScore++;
                updateMessage('–ö–æ–º–ø\'—é—Ç–µ—Ä –ø–µ—Ä–µ–º—ñ–≥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!');
            }
            
            updateDisplay();
        }

        function updateMessage(text) {
            document.getElementById('gameMessage').textContent = text;
        }

        function newGame() {
            initGame();
        }

        function showRules() {
            alert(`–ü–†–ê–í–ò–õ–ê –ú–£–ó–ò–ß–ù–û–ì–û –î–û–ú–Ü–ù–û:

–ö–æ–∂–Ω–µ –¥–æ–º—ñ–Ω–æ –º—ñ—Å—Ç–∏—Ç—å –¥–≤–∞ –º—É–∑–∏—á–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
–ú–µ—Ç–∞: –ø–æ–∑–±—É—Ç–∏—Å—è –≤—Å—ñ—Ö —Å–≤–æ—ó—Ö –¥–æ–º—ñ–Ω–æ –ø–µ—Ä—à–∏–º
–ü–µ—Ä–µ—Ç—è–≥—É–π—Ç–µ –¥–æ–º—ñ–Ω–æ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –∞–±–æ –∫—ñ–Ω–µ—Ü—å –ª–∞–Ω—Ü—é–∂–∫–∞
–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –Ω–∞ —Å—Ç–∏–∫—É –ø–æ–≤–∏–Ω–Ω—ñ –∑–±—ñ–≥–∞—Ç–∏—Å—è
–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–≤–æ—Ä–æ—Ç–∞ –Ω–∞ –¥–æ–º—ñ–Ω–æ —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –π–æ–≥–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ

–ó–ê–ü–ê–° –î–û–ú–Ü–ù–û:
–Ø–∫—â–æ —É –≤–∞—Å –Ω–µ–º–∞—î –ø—ñ–¥—Ö–æ–¥—è—â–∏—Ö —Ö–æ–¥—ñ–≤ - –≤—ñ–∑—å–º—ñ—Ç—å –¥–æ–º—ñ–Ω–æ –∑ –∑–∞–ø–∞—Å—É
–ö–Ω–æ–ø–∫–∞ "–í–∑—è—Ç–∏ –¥–æ–º—ñ–Ω–æ" —Å—Ç–∞—î –∞–∫—Ç–∏–≤–Ω–æ—é —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ –Ω–µ–º–∞—î —Ö–æ–¥—ñ–≤
–ú–æ–∂–Ω–∞ –±—Ä–∞—Ç–∏ –¥–æ–º—ñ–Ω–æ –¥–æ–∫–∏ –Ω–µ –∑'—è–≤–∏—Ç—å—Å—è –ø—ñ–¥—Ö–æ–¥—è—â–∏–π —Ö—ñ–¥

–î–æ–º—ñ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑—Ç–∞—à–æ–≤—É—é—Ç—å—Å—è —É –≤–∏–≥–ª—è–¥—ñ —Å–ø—ñ—Ä–∞–ª—ñ
–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ñ —Ç–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ñ –¥–æ–º—ñ–Ω–æ —á–µ—Ä–≥—É—é—Ç—å—Å—è
–ü–µ—Ä–µ–º–∞–≥–∞—î —Ç–æ–π, —Ö—Ç–æ –ø–µ—Ä—à–∏–º –ø–æ–∑–±—É–¥–µ—Ç—å—Å—è –≤—Å—ñ—Ö –¥–æ–º—ñ–Ω–æ

–£–¥–∞—á—ñ –≤ –≥—Ä—ñ!`);
        }

        initGame();
    </script>
</body>
</html>
